with appsflyer as (
    select
        network_app_id,
        media_source,
        agency,
        campaign,
        adset,
        ad_creative,
        keywords,
        campaign_id,
        adset_id,
        ad_creative_id,
        act_date,
        country_code,
        site_id,
        cost,
        installs,
        mapped_app_id,
        {{ get_is_cross_promotion('media_source', 'campaign', '') }} as is_cross_promotions -- site_id is required as 3rd argument, but new raw sources do not have this data. Will need check again with project team.
    from {{ ref('base__appsflyer__cost') }}
),

dim_currency_exchange AS
    (select
      max(from_usd) as from_usd,
      currency,
      date
    from `amanotes-analytics.performance_monitoring.dim_currency_exchange`
    group by currency, date
),

dim_ama_app as
    (select
        appsflyer_app_id,
        ama_app_id as ama_app_id
    from `amanotes-analytics.pm_dbt.dim_ama_app` daa, unnest(appsflyer_app_ids) as appsflyer_app_id
    where
        appsflyer_app_id <> '' and
        exists (
            select 1 
            from `amanotes-analytics.pm_dbt.dim_ama_app`, unnest(appsflyer_app_ids) as appsflyer_app_id_max
            group by appsflyer_app_id_max
            having max(created_at) = daa.created_at and appsflyer_app_id = appsflyer_app_id_max
        )
),

keyword_meta as (
    select
        distinct act_date,
        campaign_id,
        keyword_id,
        keyword
    from `amanotes-analytics.raw_cost_by_batch.searchads_keyword_metadata_*`
),

af_map_keyword as (
    select
        af.* except(keywords),
        case 
            when af.keywords is null then null
            else coalesce(kw_meta.keyword, af.keywords)
        end as keywords
    from `{{ var.value.bigquery_project }}.staging_appsflyer_by_day.appsflyer_*` as af
    full outer join keyword_meta as kw_meta
    on 
        af.act_date = kw_meta.act_date and 
        cast(af.keywords as string) = cast(kw_meta.keyword_id as string) and 
        cast(af.campaign_id as string) = cast(kw_meta.campaign_id as string)
),

appsflyer_pre as
    (select
        af.* except(cost),
        daa.ama_app_id as app_id,
        cast(cost as float64) as raw_cost
    from af_map_keyword as af
    left join dim_ama_app as daa
        on af.network_app_id = daa.appsflyer_app_id
),
      
appsflyer_agg as (
    select
        current_datetime('+7') as update_at,
        cast(act_date as date) as act_date,
        cast(app_id as string) as app_id,
        cast(network_app_id as string) as network_app_id,
        case
            when upper(country_code) = 'uk' then 'gb'
            else upper(country_code)
        end as country_code,
        case
            when substr(cast(app_id as string), -1) = 'a' then 'android'
            when substr(cast(app_id as string), -1) = 'i' then 'ios'
            when substr(cast(app_id as string), -1) = 'f' then 'facebook'
        end as app_platform,
        media_source,
        case
            when agency = 'none' then null
            when lower(agency) = 'fbmagic' then 'yeahmobi'
            else agency end as agency_from_appsflyer,
        {{ get_agency_from_campaign_name_and_default_rules('media_source', 'campaign', 'network_app_id') }} as agency_from_campaign_name,
        cast(campaign as string) as campaign,
        cast(campaign_id as string) as campaign_id,
        cast(adset as string) as adset,
        cast(adset_id as string) as adset_id,
        cast(ad_creative as string) as ad_creative,
        cast(ad_creative_id as string) as ad_creative_id,
        cast(null as string) as ad_type,
        cast(keywords as string) as keyword,
        cast(null as string) as kw_match_type,
        cast(site_id as string) as site_id,
        coalesce({{ get_is_cross_promotion('media_source', 'campaign', 'site_id') }}, false) as is_cross_promotion,
        sum(cast(null  as int64)) as impressions,
        sum(cast(null as int64)) as clicks,
        sum(cast(installs as int64)) as installs,
        sum(cast(raw_cost as float64)) as raw_cost,
        'usd' as raw_cost_currency
    from appsflyer_pre
    group by
      act_date, app_id, network_app_id, country_code, app_platform,
      media_source, agency_from_appsflyer, agency_from_campaign_name,
      campaign, campaign_id, adset, adset_id, ad_creative, ad_creative_id,
      ad_type, keyword, kw_match_type, site_id, is_cross_promotion, raw_cost_currency
    ),

  appsflyer as
    (select
      update_at,
      act_date,
      coalesce(app_id, network_app_id) as app_id,
      a.network_app_id,
      app_platform,
      case when dc.country_name_firebase is null then 'o1'
          else coalesce(a.country_code, 'o1')
      end as country_code,
      coalesce(dc.country_name_firebase, 'other country') as country_name,
      media_source,
      coalesce(agency_from_appsflyer, agency_from_campaign_name) as agency,
      campaign,
      campaign_id,
      adset,
      adset_id,
      ad_creative,
      ad_creative_id,
      ad_type,
      keyword,
      kw_match_type,
      site_id,
      is_cross_promotion,
      raw_cost_currency,
      app_id is null as app_is_not_mapped,
      case when app_id is null then 'pama' else p.team end as team,
      sum(impressions) as impressions,
      sum(clicks) as clicks,
      sum(installs) as installs,
      sum(raw_cost / ce.from_usd) as raw_cost
    from appsflyer_agg as a
    left join `amanotes-analytics.performance_monitoring.dim_country` as dc on dc.country_code = coalesce(a.country_code, 'o1')
    left join dim_currency_exchange as ce on ce.date = a.act_date and ce.currency = a.raw_cost_currency
    left join dim_product_code as p using(app_id)
    group by
      update_at, act_date, app_id, network_app_id, country_code, country_name, app_platform,
      media_source, agency, campaign, campaign_id, adset, adset_id, ad_creative, ad_creative_id,
      ad_type, keyword, kw_match_type, site_id, is_cross_promotion, raw_cost_currency, app_is_not_mapped, team
    ),

dim_appsflyer_fee as
    (select distinct
      coalesce(lag(end_date) over(order by end_date) + 1, '1000-01-01') as start_date,
      * replace(
        coalesce(end_date, '9999-12-31') as end_date
      ),
    from `amanotes-analytics.performance_monitoring.dim_appsflyer_fee`
    where fee_rate is not null)

select
  a.*,
  a.raw_cost as cost,
  case when a.media_source <> 'organic' then dim_appsflyer_fee.fee_rate else 0 end as af_rate,
  case when a.media_source <> 'organic' then dim_appsflyer_fee.fee_rate * a.installs else 0 end as af_fee
from appsflyer as a
cross join dim_appsflyer_fee  
where a.act_date between dim_appsflyer_fee.start_date and dim_appsflyer_fee.end_date